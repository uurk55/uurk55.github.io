# Hugo sitesini GitHub Pages'e kurmak ve dağıtmak için örnek iş akışı
name: Deploy Hugo site to Pages

on:
  # Varsayılan dala yapılan push işlemlerinde çalışır
  push:
    branches:
      - main
  # Bu iş akışını Actions sekmesinden manuel olarak çalıştırmanıza olanak tanır
  workflow_dispatch:

# GITHUB_TOKEN'in GitHub Pages'e dağıtım yapmasına izin vermek için izinleri ayarlar
permissions:
  contents: read
  pages: write
  id-token: write

# Yalnızca bir eşzamanlı dağıtıma izin ver, devam eden ve en son sıraya alınan çalıştırmalar arasında sıraya alınan çalıştırmaları atla.
# Ancak, bu üretim dağıtımlarının tamamlanmasına izin vermek istediğimiz için devam eden çalıştırmaları İPTAL ETME.
concurrency:
  group: "pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  # Kurulum işi
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v0.147.9/hugo_extended_0.147.9_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Hugo
        env:
          # Hugo modülleriyle maksimum geriye dönük uyumluluk için
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

    # Dağıtım işi
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id  GitHub depona git. **"Actions"** sekmesine tıkla.
2.  Sol taraftaki menüde **"Caches"** (Önbellekler) seçeneğini göreceksin. Ona tıkla.
3.  Eğer orada bir veya daha fazla önbellek listeleniyorsa, hepsini seç ve **"Delete"** (Sil) butonuna basarak sil. Eğer boşsa, bu adımı atla.

**2. Adım: Boş Bir `commit` ile Dağıtımı Tetiklemek**

Şimdi, hiçbir dosyayı değiştirmeden, sadece "Hey, ben bir değişiklik yaptım, her şeyi yeniden yap!" demek için boş bir `commit` göndereceğiz.

1.  Komut İstemi'ni aç (`edu3d-blog` klasöründe).
2.  Aşağıdaki özel komutu çalıştır. Bu komut, hiçbir dosya değişikliği olmasa bile yeni bir `commit` oluşturmaya zorlar.
    ```bash
    git commit --: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}